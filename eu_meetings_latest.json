[
  {
    "num": 159,
    "datetime": "2022-10-27T19:00:00+03:00",
    "season": 2022,
    "place": {
      "name": "Põhja Öökull", "loc": "https://www.google.com/maps/@59.4348549,24.7420298,3a,19.2y,231.35h,86.23t/data=!3m7!1e1!3m5!1sk0QGDJlOEDHOfv3dHPKeKw!2e0!6shttps:%2F%2Fstreetviewpixels-pa.googleapis.com%2Fv1%2Fthumbnail%3Fpanoid%3Dk0QGDJlOEDHOfv3dHPKeKw%26cb_client%3Dmaps_sv.tactile.gps%26w%3D203%26h%3D100%26yaw%3D286.97736%26pitch%3D0%26thumbfov%3D100!7i13312!8i6656",
      "addr": "Rüütli 28, 10130 Tallinn", "url": "https://www.facebook.com/pohjaookull"
    },
    "org": {"mod": ["astalnuhhin"], "photo": [""]},
    "photo": [],
    "event": "",
    "speeches": [
      {
        "org": {"cam": [""], "edit": [""]},
        "lang": "ru",
        "labels": [],
        "youtube": [],
        "speakers": [
          {
            "names": {"*": "Andrei Solntsev", "ru": "Андрей Солнцев"},
            "titles": {"*": "Software developer @ Codeborne"},
            "url": "https://ee.linkedin.com/in/asolntsev",
            "image": "asolntsev_2018.jpg"
          }
        ],
        "titles": {"ru": "WTF Thread Pools"},
        "descr": {
          "ru": [
            "Что в джаве легко - это многопоточном программирование.",
            "Что в джаве ещё легче - это многопоточно накосячить.",
            "Рассмотрим типичные ошибки и реальный кейсы, приводившие к подвисанию продакшина.",
            "И выясним, правда ли корутины котлина и новые виртуальные потоки из джавы 19 спасают ситуацию?",
            "Всё как мы любим!"
          ]
        }
      },
      {
        "org": {"cam": [""], "edit": [""]},
        "lang": "ru",
        "labels": [],
        "youtube": [],
        "speakers": [
          {
            "names": {"*": "Andrei Solntsev", "ru": "Андрей Солнцев"},
            "titles": {"*": "Software developer @ Codeborne"},
            "url": "https://ee.linkedin.com/in/asolntsev",
            "image": "asolntsev_2018.jpg"
          }
        ],
        "titles": {"ru": "Как законтрибьютить в опенсорс, чтобы не сгореть со стыда"},
        "descr": {
          "ru": [
            "Мы все используем опенсорсные продукты. Но очень мало тех, кто решается туда законтрибьютить. Помимо банальной лени, есть и более серьёзные причины:",
            "* Сложность/корявость самих проектов. С чего начать? Где лежат исходники? Как их скомпилировать? Почему всё красное?",
            "* Боязнь показать свой код миру. А вдруг засмеют? А вдруг мой код покажется всем корявым?",
            "Я покажу, как справиться с техническими и психологическими трудностями. Прямо во время доклада сделаем изменения в каких-нибудь опенсорсных проектах.",
            "Сделаем Сову центром принятия опенсорсных решений!"
          ]
        }
      }
    ]
  },
  {
    "num": 160,
    "datetime": "2022-11-17T19:00:00+03:00",
    "season": 2022,
    "place": {
      "name": "Põhja Öökull", "loc": "https://www.google.com/maps/@59.4348549,24.7420298,3a,19.2y,231.35h,86.23t/data=!3m7!1e1!3m5!1sk0QGDJlOEDHOfv3dHPKeKw!2e0!6shttps:%2F%2Fstreetviewpixels-pa.googleapis.com%2Fv1%2Fthumbnail%3Fpanoid%3Dk0QGDJlOEDHOfv3dHPKeKw%26cb_client%3Dmaps_sv.tactile.gps%26w%3D203%26h%3D100%26yaw%3D286.97736%26pitch%3D0%26thumbfov%3D100!7i13312!8i6656",
      "addr": "Rüütli 28, 10130 Tallinn", "url": "https://www.facebook.com/pohjaookull"
    },
    "org": {"mod": ["astalnuhhin"], "photo": [""]},
    "photo": [],
    "event": "",
    "speeches": [
      {
        "org": {"cam": [""], "edit": [""]},
        "lang": "ru",
        "labels": [],
        "youtube": [],
        "speakers": [
          {
            "names": {"*": "Vyacheslav Tyutyunkov", "ru": "Вячеслав Тютюньков"},
            "titles": {"*": "Backend Tech Lead @ Wrike"},
            "url": "https://www.linkedin.com/in/tyutyunkovve",
            "image": "vtyutyunkov.jpg"
          }
        ],
        "titles": {"ru": "К микросервисам через reverse engineering и кодогенерацию", "*": "Through reverse engineering and code generation to microservices"},
        "descr": {
          "ru": [
            "Разрабатывая информационную систему с нуля, мы можем выбрать практически любой из множества вариантов как технологий, так и архитектур в целом, в том числе принципов взаимодействия частей системы. Но что же делать, если система уже есть и у неё довольно богатая история? Как большую энтерпрайз систему, исторически развивающуюся в режиме «монолита», разделить на микросервисы и организовать взаимодействие между ними? В большей степени проблема тут даже не столько в выборе архитектуры и построении взаимодействия, сколько в сложности поддержать имеющийся и постоянно изменяющийся под продуктовые нужны код «монолита», параллельно внедряя новые принципы и подходы. В докладе я расскажу как мы в Wrike, используя reverse engineering и немного «кодогенерации», реализовали первые шаги по выделению отдельных микросервисов и запустили первый «почти настоящий» BFF сервис в рамках нашего монолита."
          ],
          "*": [
            "When developing an information system from scratch, we can choose almost any technology and architecture option in general, including the principle of interaction between system parts. But what if we already have a system with a large monolithic code base? How can such a large enterprise system be divided into microservices properly organized to interact with each other?",
            "The main difficulty often lies in the fact that it is necessary to simultaneously maintain the existing monolithic code base and introduce new principles and approaches. In this article, I will tell you how we used reverse engineering and a dash of code generation to launch the first “almost real” BFF service as part of Wrike's monolithic system by taking first steps in isolating individual microservices."
          ]
        }
      },
      {
        "org": {"cam": [""], "edit": [""]},
        "lang": "ru",
        "labels": [],
        "youtube": [],
        "speakers": [
          {
            "names": {"*": "Yan Khonski", "ru": "Ян Хонский"},
            "titles": {"*": "Backend software engineer @ Wrike"},
            "url": "https://www.linkedin.com/in/yan-khonski",
            "image": "ykhonski.jpg"
          }
        ],
        "titles": {"ru": "Блокировки и многоверсионность данных в PostgreSQL", "*": "Locks and versioning in the database transactions"},
        "descr": {
          "ru": [
            "Как достичь различных уровней изоляции транзакций в базе данных? Какую выгоду нам принесёт тот или иной уровень изоляции, и чем мы за это пожертвуем? Как позволить другим клиентам читать данные, когда их кто-то изменяет в этот же момент?",
            "Уровни изоляции транзакций определялись на основе запрета для разных уровней. Блокировка и многоверсионность данных позволяли клиентам одновременно работать с данными, при этом их доступ был изолирован.",
            "Каждый из этих подходов - балансирование между пропускной способностью и согласованностью (consistency). Понимание обоих подходов поможет вам принять решение по масштабированию вашей базы данных.",
            "Поиграемся на примерах в PostgreSQL. Посмотрим, как в PostgreSQL реализована изоляция транзакций и проверяется версия строки. Рассмотрим последствия многоверсионности данных и очистку базы от ненужных (удалённых) записей (VACUUM)."
          ],
          "*": [
            "How transaction isolation is achieved in the databases? What trade-offs should we consider? Can we allow clients to read data, while someone is modifying the same data at the same time?",
            "Transaction isolation levels were defined based on phenomena which are prohibited for different levels. Locking and versioning are used to isolate concurrent access to the same data by multiple clients. Each of these approaches will trade off with throughput and consistency. Understanding of both approaches will help you to make decisions when it comes to scaling your database.",
            "We will play with PostgreSQL to see different phenomena for different transaction isolation level. We will try to understand how PostgreSQL implemented transaction isolation. We will look under the hood how the row version is checked. We will see the implications of versioning and how to deal with them (VACUUM)."
          ]
        }
      }
    ]
  },
  {
    "num": 161,
    "datetime": "2022-12-15T19:00:00+03:00",
    "season": 2023,
    "place": {
      "name": "Põhja Öökull", "loc": "https://www.google.com/maps/@59.4348549,24.7420298,3a,19.2y,231.35h,86.23t/data=!3m7!1e1!3m5!1sk0QGDJlOEDHOfv3dHPKeKw!2e0!6shttps:%2F%2Fstreetviewpixels-pa.googleapis.com%2Fv1%2Fthumbnail%3Fpanoid%3Dk0QGDJlOEDHOfv3dHPKeKw%26cb_client%3Dmaps_sv.tactile.gps%26w%3D203%26h%3D100%26yaw%3D286.97736%26pitch%3D0%26thumbfov%3D100!7i13312!8i6656",
      "addr": "Rüütli 28, 10130 Tallinn", "url": "https://www.facebook.com/pohjaookull"
    },
    "org": {"mod": ["astalnuhhin"], "photo": [""]},
    "photo": [],
    "event": "",
    "speeches": [
      {
        "org": {"cam": [""], "edit": [""]},
        "lang": "ru",
        "labels": [],
        "youtube": [],
        "speakers": [
          {
            "names": {"*": "Anton Arhipov", "ru": "Антон Архипов"},
            "titles": {"*": "Developer Advocate @ JetBrains"},
            "url": "https://ee.linkedin.com/in/antonarhipov",
            "image": "aarhipov.jpg"
          }
        ],
        "titles": {"ru": "???"},
        "descr": {
          "ru": [
            "???"
          ]
        }
      },
      {
        "org": {"cam": [""], "edit": [""]},
        "lang": "ru",
        "labels": [],
        "youtube": [],
        "speakers": [
          {
            "names": {"*": "Anton Arhipov", "ru": "Антон Архипов"},
            "titles": {"*": "Developer Advocate @ JetBrains"},
            "url": "https://ee.linkedin.com/in/antonarhipov",
            "image": "aarhipov.jpg"
          }
        ],
        "titles": {"ru": "Новинки от JetBrains: Fleet, Qodana, TeamCity Pipelines и ещё кое-что"},
        "descr": {
          "ru": [
            "Как и следует из названия, Антон расскажет о новинках от JetBrains."
          ]
        }
      }
    ]
  }
]
